/***************************************************************************************
 * <copyright file="Evado.UniForm.Clinical\ApplicationService.cs" 
 *  company="EVADO HOLDING PTY. LTD.">
 *     
 *      Copyright (c) 2002 - 2020 EVADO HOLDING PTY. LTD..  All rights reserved.
 *     
 *      The use and distribution terms for this software are contained in the file
 *      named \license.txt, which can be found in the root of this distribution.
 *      By using this software in any fashion, you are agreeing to be bound by the
 *      terms of this license.
 *     
 *      You must not remove this notice, or any other, from this software.
 *     
 * </copyright>
 * 
 * Description: 
 *  This class contains the AbstractedPage ResultData object.
 *
 ****************************************************************************************/
using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Text;
using System.Web;
using System.Web.SessionState;
using System.Configuration;

using Evado.Bll;
using Evado.Model;
using Evado.Bll.Clinical;
using Evado.Model.Digital;
/// using Evado.Web;


namespace Evado.UniForm.Clinical
{
  /// <summary>
  /// This partical class contains the source code for handling the offline ResultData creation process
  /// </summary>
  public partial class EuAdapter : Evado.Model.UniForm.ApplicationAdapterBase
  {
    private const int CONST_NEXT_SCHEDULED_Subject_Milestone_NUMBER = 2;
    private Evado.Model.UniForm.AppData _OfflineAppData = null;
    private int _ScheduledVisitCount = 0;


    // ==================================================================================
    /// <summary>
    /// This method generates the offline ResultData structure and appends to the current 
    /// milestone selection page.
    /// </summary>
    /// <param name="PageCommand">Evado.Model.UniForm.Command object</param>
    /// <returns>Evado.Model.UniForm.AppData</returns>
    /// <remarks>
    /// The offline ResultData is generated by iterating through the milestone commands contained in the milestone display pageMenuGroup.
    //  - Iterate through the milestone selection commands.
    //  - Retrieve and append the milestone selection page.
    ///    - Open the visit view page for the current milestone
    ///    - Iterate through the visits objects
    ///      - Open visit object and append to the offline ResultData.
    ///       - Iterate through the visit commands
    ///         - Open and create or add each page groupCommand.
    //  - Iterate through the AE records
    ///    - Open and add each AE record.
    //  - Iterate through the SAE records
    ///    - Open and add each AE record.
    //  - Iterate through the concomitant medication records.
    ///    - Open and add each medication record.
    /// </remarks>
    //  ----------------------------------------------------------------------------------
    private Evado.Model.UniForm.AppData getOfflineData (
      Evado.Model.UniForm.AppData ClientDataObject,
      Evado.Model.UniForm.Command PageCommand )
    {
      this.LogValue ( Evado.Model.UniForm.EuStatics.CONST_METHOD_START
        + "Evado.UniForm.Clinical.ApplicationService.getOfflineData method. "
        + "\r\n Parameter PageCommand " + PageCommand.getAsString ( false, true )
        + "\r\n\r\n Exit command title: " + this.ExitCommand.Title );
      // 
      // Initialise the methods variables and objects.
      // 
      this._OfflineAppData = ClientDataObject;
      bool bSubjectSelectionFound = false;
      int intDebugCount = 1000000;

      this.LogValue ( "Offline Application Data Id: " + this._OfflineAppData.Id
        + ", Page.Id: " + this._OfflineAppData.Page.Id
        + ", Title: " + this._OfflineAppData.Title );

      this._OfflineAppData.Status = Model.UniForm.AppData.StatusCodes.Device_Off_Line;

      //
      // if debug is turned off then let the iteration run to 1,000,000 items.
      //
      if ( this.LoggingLevel > 2 )
      {
        intDebugCount = 3;

        this.LogValue ( "Subject Debug Count: " + intDebugCount );
      }

      try
      {
        // 
        // the incorrect page is generated exit with an error.
        // 
        if ( this._OfflineAppData.Page.PageId != EvPageIds.Subject_View.ToString ( ) )
        {
          this.LogValue ( EvLabels.Offline_Correct_Home_Page_Not_Generated );

          this._OfflineAppData.Message = EvLabels.Offline_Correct_Home_Page_Not_Generated;

          this._EventCode = EvEventCodes.WebServices_Offline_Home_Page_Error;

          return new Model.UniForm.AppData ( );
        }

        this.LogValue ( "Adding offline data object" );

        // 
        // Initialise the offline ResultData object.
        // 
        this._OfflineAppData.Offline = new Model.UniForm.Offline ( );
        this._OfflineAppData.Offline.Id = Guid.NewGuid ( );

        this.LogValue ( "Removing Create Commands from page commands. " );

        // 
        // Iterate through the list of page commands to remove the create milestone groupCommand.
        // 
        for ( int pageCommandCount = 0; pageCommandCount < this._OfflineAppData.Page.CommandList.Count; pageCommandCount++ )
        {
          Evado.Model.UniForm.Command pageCommand = this._OfflineAppData.Page.CommandList [ pageCommandCount ];

          this.LogValue ( "Page command title: " + pageCommand.Title );

          if ( pageCommand.Method == Model.UniForm.ApplicationMethods.Create_Object )
          {
            this._OfflineAppData.Page.CommandList.RemoveAt ( pageCommandCount );
            pageCommandCount--;
          }

        }//END page groupCommand iteration loop.

        this.LogValue ( "Appending Offline page data. " );
        // 
        // Append the page to the list of page objects.  This page will become the offlined home page.
        // 
        this._OfflineAppData.Page.Title = EvLabels.Offline_Home_Page_Title;

        this._OfflineAppData.Offline.AppendPage ( this._OfflineAppData.Page );

        // 
        // Create teh page ResultData object for the page.
        // 
        Evado.Model.UniForm.PageData pageData = this._OfflineAppData.Page.getPageData (
          EuAdapter.APPLICATION_ID,
          EuAdapterClasses.Subjects.ToString ( ) );

        // 
        // Add the page ResultData object to the list of page ResultData objects.
        // 
        this._OfflineAppData.Offline.PageDataList.Add ( pageData );

        this.LogValue ( "Offline Page count: " + this._OfflineAppData.Offline.PageList.Count );

        // 
        // Check that the page has groups and one of the groups has the selection commands
        // 
        // If there is not selection pageMenuGroup exit the method with an error.
        // 
        if ( this._OfflineAppData.Page.GroupList.Count == 0 )
        {
          this.LogValue ( EvLabels.Subject_Offline_List_Empty );

          this._OfflineAppData.Message = EvLabels.Subject_Offline_List_Empty;

          this._EventCode = EvEventCodes.WebServices_Offline_Subject_List_Empty;

          return _OfflineAppData;
        }

        //
        // The page has a selection pageMenuGroup to select the site to be taken offline.
        // 
        // Iterate through the page groups to remove selection groups and process the child objects.
        // 
        for ( int groupCount = 0; groupCount < this._OfflineAppData.Page.GroupList.Count; groupCount++ )
        {
          Evado.Model.UniForm.Group subjectSelectionGroup = this._OfflineAppData.Page.GroupList [ groupCount ];

          //
          // if a pageMenuGroup has offline hide pageMenuGroup parameter then delete it from the pageMenuGroup.
          // 
          if ( subjectSelectionGroup.hasParameter ( Model.UniForm.GroupParameterList.Offline_Hide_Group ) == true )
          {
            this._OfflineAppData.Page.GroupList.RemoveAt ( groupCount );
            groupCount--;
          }

          // 
          //  Select the milestone selection pageMenuGroup
          // 
          if ( subjectSelectionGroup.Title == EvLabels.Subject_Selection_Group_Title )
          {
            bSubjectSelectionFound = true;

            this.LogValue ( "Iterating through the subject navigation page command group." );
            // 
            // Iterate through the pageMenuGroup commands retrieving and adding the ResultData for each milestone.
            // 
            for ( int subjectCount = 0;
              subjectCount < subjectSelectionGroup.CommandList.Count && subjectCount < intDebugCount;
              subjectCount++ )
            {
              this.LogText ( "Count: " + subjectCount );
              // 
              // get the milestone queryState and selection groupCommand.
              // 
              Evado.Model.UniForm.Command selectionCommand = subjectSelectionGroup.CommandList [ subjectCount ];

              this.LogValue ( " selection command title: " + selectionCommand.Title );

              // 
              // if the groupCommand is pointing to a milestone with call the milestone navigation method to 
              // retieve and append the milestone's ResultData.
              // 
              if ( selectionCommand.Object == EuAdapterClasses.Subjects.ToString ( )
                && selectionCommand.Method == Model.UniForm.ApplicationMethods.Get_Object )
              {
                // 
                // Call the offline milestone navigation method and page's ResultData reference GUID is returned.
                //  
                Guid PageDataGuid = this.getOfflineSubjectNavigationData ( selectionCommand );

                //
                // Add the page ResultData guid as a parameter to the groupCommand.
                // 
                selectionCommand.SetGuid ( PageDataGuid );

                // 
                // Add the milestone navigation page references to the page page reference values.
                // 
                pageData.addPageReference ( selectionCommand.Id, PageDataGuid );
              }
              else
              {
                // 
                // if the groupCommand is not a milestone groupCommand remove from the list.
                // 
                subjectSelectionGroup.CommandList.RemoveAt ( subjectCount );
                subjectCount--;
              }

            }//END milestone selection groupCommand iteration loop.

          }//END selected pageMenuGroup found.

        }//END page pageMenuGroup iteration loop

        // 
        // if the milestone selection is not found return an error code.
        // 
        if ( bSubjectSelectionFound == false )
        {
          this.LogValue ( EvLabels.Subject_Group_Empty );

          this.ClientDataObject.Message = EvLabels.Subject_Group_Empty;

          this._EventCode = EvEventCodes.WebServices_Offline_Subject_Group_Error;

          return this.ClientDataObject;
        }

        // 
        // Set the page status to offline.  Indicates that the page has been successfully taken offline.
        // 
        this._OfflineAppData.Status = Evado.Model.UniForm.AppData.StatusCodes.Device_Off_Line;

        this.LogValue ( "=========== END OF getOfflineData METHOD ===========r\n" );

        return _OfflineAppData;
      }
      catch ( Exception Ex )
      {
        this.LogValue ( EvLabels.Offline_Page_Generation_Error_Message );

        this.ClientDataObject.Message = EvLabels.Offline_Page_Generation_Error_Message;

        this._EventCode = EvEventCodes.WebServices_Offline_Subject_Group_Error;

        this.LogValue ( "Exception occured in getOfflineData. " + Evado.Model.Digital.EvcStatics.getException ( Ex ) );
      }

      this.LogValue ( "=========== END OF getOfflineData METHOD ===========r\n" );

      return this.ClientDataObject;

    }//END getOfflineData method

    // ==================================================================================
    /// <summary>
    /// This method generates the milestone offline ResultData structure and appends to the current 
    /// milestone selection page.
    /// 
    /// The iterates through the navigation commands to take the Visit, AE SAE and CCM objects
    /// offline.
    /// 
    /// </summary>
    /// <param name="SubjectGroupCommand">Evado.Model.UniForm.Command object</param>
    /// <returns>Guid: containing the page ResultData object reference value</returns>
    //  ----------------------------------------------------------------------------------
    private Guid getOfflineSubjectNavigationData (
      Evado.Model.UniForm.Command SubjectGroupCommand )
    {
      this.LogValue ( Evado.Model.UniForm.EuStatics.CONST_METHOD_START
        + "Evado.UniForm.Clinical.ApplicationService.getOfflineSubjectNavigationData method. "
        + "\r\n Parameter PageCommand " + SubjectGroupCommand.getAsString ( false, true ) );
      //
      // Initialise the methods variables and objects.
      // 
      EuSubjects subjects = new EuSubjects (
              this._ApplicationObjects,
              this.ServiceUserProfile,
              this.Session,
              this.UniForm_BinaryFilePath,
              this.UniForm_BinaryServiceUrl, 
              this.ClassParameters );

      subjects.LoggingLevel = this.LoggingLevel;

      // 
      // Get the milestone client ResultData object groupCommand
      // 
      Evado.Model.UniForm.AppData subjectNavigationData = subjects.getDataObject ( SubjectGroupCommand );

      // 
      // Rename the page title to remove the milestone information as the same layout will be used for 
      // all subjects in the offline environment.
      // 
      subjectNavigationData.Page.Title = EvLabels.Subject_Summary_Page_Title;

      this.LogValue ( "subject navigation Page title: " + subjectNavigationData.Page.Title );

      // 
      // Get the offline page and ResultData.
      // 
      this._OfflineAppData.Offline.AppendPage ( subjectNavigationData.Page );

      // 
      // Create the page ResultData object for the page.
      //
      Evado.Model.UniForm.PageData pageData = subjectNavigationData.Page.getPageData (
           EuAdapter.APPLICATION_ID,
           EuAdapterClasses.Subjects.ToString ( ) );

      // 
      // get the first instance of the offline page to resolve it's groupCommand ids'
      // 
      Evado.Model.UniForm.Page firstSubjectNavigationPage =
        this.getOffLinePageObject ( subjectNavigationData.Page.PageId );

      // 
      // If the returned page is null the page is not in the list so
      // use the current page.  
      // It will be added at the end of the method.
      // 
      if ( firstSubjectNavigationPage == null )
      {
        firstSubjectNavigationPage = subjectNavigationData.Page;
      }

      this.LogValue ( "First Navigation Page title: " + firstSubjectNavigationPage.Title );

      // 
      // Add the page ResultData object to the list of page ResultData objects.
      // 
      this._OfflineAppData.Offline.PageDataList.Add ( pageData );

      // 
      // Check that the page has groups and one of the groups has the ResultData navigation commands
      // 
      // If no groups are found exit the method with an empty guid.
      // 
      if ( subjectNavigationData.Page.GroupList.Count == 0 )
      {
        this.LogValue ( EvLabels.Subject_Navigation_Group_Empty );

        this._OfflineAppData.Message = EvLabels.Subject_Navigation_Group_Empty;

        this._EventCode = EvEventCodes.WebServices_Offline_Visit_List_Empty;

        return Guid.Empty;
      }

      // 
      //  Select the milestone navigation groupCommand pageMenuGroup
      // 
      Evado.Model.UniForm.Group subjectNavigationGroup =
        subjectNavigationData.Page.GetGroup ( EvLabels.Subject_Navigation_Group_Title );

      this.LogValue ( "subjectNavigationGroup title:" + subjectNavigationGroup.Title );

      // 
      // Exit the method is the navigation pageMenuGroup is not found exit the pageMenuGroup with an empty guid.
      // 
      if ( subjectNavigationGroup == new Evado.Model.UniForm.Group ( ) )
      {
        this.LogValue ( EvLabels.Subject_Navigation_Group_Title_Error );

        this._OfflineAppData.Message = EvLabels.Subject_Navigation_Group_Title_Error;

        if ( this.Session.Trial.Type == EvTrial.TrialTypes.Registry )
        {
          this._OfflineAppData.Message = EvLabels.Patient_Navigation_Group_Title_Error;
        }

        this._EventCode = EvEventCodes.WebServices_Offline_Subject_Group_Error;

        return Guid.Empty;
      }

      this.LogValue ( "Subject Data Navigation Group Title Exists" );

      // 
      // Iterate through the navigation pageMenuGroup commands collecting the ResultData for: FirstSubject Demographics,
      // Visits, AE, SAE and CCM commands and deleting all other commands in the navigation list.
      // 
      for ( int navigationGroupCount = 0;
        navigationGroupCount < subjectNavigationGroup.CommandList.Count;
        navigationGroupCount++ )
      {
        this.LogValue ( " navigation Count: " + navigationGroupCount );

        // 
        // get the milestone selection groupCommand.
        // 
        Evado.Model.UniForm.Command navigationCommand = subjectNavigationGroup.CommandList [ navigationGroupCount ];

        this.LogValue ( " command Title: " + navigationCommand.Title );

        // 
        // get the first instance of the page navigation groupCommand 
        // 
        Evado.Model.UniForm.Command firstNavigationCommand = firstSubjectNavigationPage.getCommand ( navigationCommand.Title );

        // 
        // Retrieve the application object type.
        // 
        EuAdapterClasses navigationObjectType =
             Evado.Model.Digital.EvcStatics.Enumerations.parseEnumValue<EuAdapterClasses> ( navigationCommand.Object );

        // 
        // Select the groupCommand if it is pointing to a milestone with get object method.
        // 
        if ( navigationObjectType == EuAdapterClasses.Subjects
          && navigationCommand.Method == Model.UniForm.ApplicationMethods.Get_Object )
        {
          // 
          // Call the ofline milestone ResultData method to generate the offline milestone ResultData.
          // 
          Guid PageDataGuid = this.getOfflineSubjectData ( subjects, navigationCommand );

          // 
          // Add the milestone navigation page references to the page page reference values.
          // 
          if ( PageDataGuid != Guid.Empty
            && firstNavigationCommand != null )
          {

            pageData.addPageReference ( firstNavigationCommand.Id, PageDataGuid );
          }

        }//END adding milestone demographics to the ResultData objects.

        // 
        // Select the groupCommand if it is pointing to a milestone with get object method.
        // 
        else if ( navigationObjectType == EuAdapterClasses.Subject_Milestone
          && navigationCommand.Method == Model.UniForm.ApplicationMethods.List_of_Objects )
        {
          // 
          // Call the offline milestone visit method and page's ResultData reference GUID is returned.
          //  
          Guid PageDataGuid = this.getOfflineVisitViewData ( navigationCommand );

          // 
          // Add the milestone navigation page references to the page page reference values.
          //  
          if ( PageDataGuid != Guid.Empty
            && firstNavigationCommand != null )
          {
            pageData.addPageReference ( firstNavigationCommand.Id, PageDataGuid );
          }

        }

        // 
        // Select the groupCommand if it is pointing to a milestone with get object method.
        // 
        else if ( navigationObjectType == EuAdapterClasses.Common_Record
          && ( navigationCommand.Method == Model.UniForm.ApplicationMethods.List_of_Objects ) )
        {
          // 
          // Call the offline milestone visit method and page's ResultData reference GUID is returned.
          //  
          Guid PageDataGuid = this.getOfflineCommonRecordData ( navigationCommand, navigationObjectType );

          // 
          // Add the milestone navigation page references to the page page reference values.
          // 
          if ( PageDataGuid != Guid.Empty
            && firstNavigationCommand != null )
          {
            pageData.addPageReference ( firstNavigationCommand.Id, PageDataGuid );
          }
        }
        else
        {
          // 
          // If not a selected groupCommand remove it from the list.
          // 
          subjectNavigationGroup.CommandList.RemoveAt ( navigationGroupCount );
          navigationGroupCount--;
        }

      }//END milestone navigation groupCommand iteration loop.


      this.LogValue ( "=========== END OF getOfflineSubjectNavigationData METHOD ===========r\n" );

      //
      // return the page ResultData object guid
      // 
      return pageData.Id;

    }//END getOfflineSubjectNavigationData method

    // ==================================================================================
    /// <summary>
    /// This method generates the visits offline ResultData structure and appends to the current 
    /// milestone selection page.
    /// 
    /// </summary>
    /// <param name="PageCommand">Evado.Model.UniForm.Command object</param>
    /// <returns>Guid: containing the page ResultData object reference value</returns>
    //  ----------------------------------------------------------------------------------
    private Guid getOfflineVisitViewData (
      Evado.Model.UniForm.Command PageCommand )
    {
      this.LogValue ( Evado.Model.UniForm.EuStatics.CONST_METHOD_START
        + "Evado.UniForm.Clinical.ApplicationService.getOfflineVisitViewData method. "
        + "\r\n Parameter PageCommand " + PageCommand.getAsString ( false, true ) );

      this.LogValue ( "OfflineVisitSelection_AllScheduled: "
        + this.Session.Trial.Data.OfflineVisitSelection_AllScheduled );
      this.LogValue ( "OfflineVisitSelection_NextScheduled: "
        + this.Session.Trial.Data.OfflineVisitSelection_NextScheduled );
      this.LogValue ( "OfflineVisitSelection_Attended: "
        + this.Session.Trial.Data.OfflineVisitSelection_Attended );
      this.LogValue ( "OfflineVisitSelection_Completed: "
        + this.Session.Trial.Data.OfflineVisitSelection_Completed );
      this.LogValue ( "OfflineVisitSelection_Monitored: "
        + this.Session.Trial.Data.OfflineVisitSelection_Monitored );

      this.LogValue ( "OfflineRecordSelection_Draft: "
        + this.Session.Trial.Data.OfflineRecordSelection_Draft );
      this.LogValue ( "OfflineRecordSelection_Submitted: "
        + this.Session.Trial.Data.OfflineRecordSelection_Submitted );
      this.LogValue ( "OfflineRecordSelection_Source: "
        + this.Session.Trial.Data.OfflineRecordSelection_Source );
      // 
      // Initialise the methods objects and variables.
      // 
      this._ScheduledVisitCount = 0;
      EuSubjectMilestones subjectMilestones = new EuSubjectMilestones (
        this._ApplicationObjects,
        this.ServiceUserProfile,
        this.Session,
        this.UniForm_BinaryFilePath,
        this.UniForm_BinaryServiceUrl,
        this._FileRepositoryPath,
        this.ClassParameters );

      subjectMilestones.LoggingLevel = this.LoggingLevel;
      // 
      // Get the visit object groupCommand
      // 
      Evado.Model.UniForm.AppData visitViewData = subjectMilestones.getDataObject ( PageCommand );

      // 
      // get the first instance of the offline page to resolve it's groupCommand ids'
      // 
      Evado.Model.UniForm.Page firstVisitViewData = this.getOffLinePageObject ( visitViewData.Page.PageId );

      // 
      // If the returned page is null the page is not in the list so
      // use the current page.  
      // It will be added at the end of the method.
      // 
      if ( firstVisitViewData == null )
      {
        firstVisitViewData = visitViewData.Page;
      }

      // 
      // Get the offline page and ResultData.
      // 
      this._OfflineAppData.Offline.AppendPage ( visitViewData.Page );

      // 
      // Create the page ResultData object for the page.
      //
      Evado.Model.UniForm.PageData pageData = visitViewData.Page.getPageData (
           EuAdapter.APPLICATION_ID,
           EuAdapterClasses.Subjects.ToString ( ) );

      // 
      // Add the page ResultData object to the list of page ResultData objects.
      // 
      this._OfflineAppData.Offline.PageDataList.Add ( pageData );

      // 
      // Check that the page has groups and one of the groups has the selection commands
      // 
      if ( visitViewData.Page.GroupList.Count == 0 )
      {
        this.LogValue ( EvLabels.Subject_Milestone_List_Group_Empty );

        this._OfflineAppData.Message = EvLabels.Subject_Milestone_List_Group_Empty;

        this._EventCode = EvEventCodes.WebServices_Offline_Visit_List_Empty;

        //
        // Return the empty guid if an error is encountered.
        // 
        return Guid.Empty;
      }

      // 
      //  Select the milestone selection pageMenuGroup
      // 
      Evado.Model.UniForm.Group visitSelectionGroup =
        visitViewData.Page.GetGroup ( EvLabels.Subject_Milestone_List_Group_Title );

      // 
      // Exit if the pageMenuGroup is not found.
      // 
      if ( visitSelectionGroup == new Evado.Model.UniForm.Group ( ) )
      {
        this.LogValue ( EvLabels.Subject_Milestone_List_Title_Error );

        this._OfflineAppData.Message = EvLabels.Subject_Milestone_List_Title_Error;

        this._EventCode = EvEventCodes.WebServices_Offline_Visit_Group_Error;

        //
        // Return the empty guid if an error is encountered.
        // 
        return Guid.Empty;
      }

      this.LogValue ( "Visit command count: " + visitSelectionGroup.CommandList.Count );
      // 
      // Iterate through the pageMenuGroup commands collecting the ResultData for each milestone.
      // 
      foreach ( Evado.Model.UniForm.Command visitCommand in visitSelectionGroup.CommandList )
      {
        this.LogValue ( "Title: " + visitCommand.Title );

        // 
        // Select the groupCommand if it is pointing to a milestone with get object method.
        // 
        if ( visitCommand.Object == EuAdapterClasses.Subject_Milestone.ToString ( )
          && visitCommand.Method == Model.UniForm.ApplicationMethods.Get_Object )
        {
          // 
          // Call the offline milestone visit method and page's ResultData reference GUID is returned.
          //  
          Guid PageDataGuid = this.getOfflineVisitData ( visitCommand, visitViewData.Page.Id );

          // 
          // get the first instance of the page navigation groupCommand 
          // 
          Evado.Model.UniForm.Command firstCommandInstance = firstVisitViewData.getCommand ( visitCommand.Title );

          if ( PageDataGuid != Guid.Empty
            && firstCommandInstance != null )
          {
            //
            // Add the page ResultData guid as a parameter to the groupCommand.
            // 
            //visitCommand.AddParameter (
            //  Model.UniForm.Command.StandardCommandParameters.PageDataGuid,
            //  PageDataGuid );

            // 
            // Add the milestone navigation page references to the page page reference values.
            // 
            pageData.addPageReference ( firstCommandInstance.Id, PageDataGuid );

          }//END page GUID not empty

        }//END get Visit object groupCommand

      }//END milestone selection groupCommand iteration loop.

      this.LogValue ( "=========== END OF getOfflineVisitViewData METHOD ===========r\n" );

      // 
      // Return the page ResultData object GUID identifier.
      // 
      return pageData.Id;

    }//END getOfflineVisitViewData method

    // ==================================================================================
    /// <summary>
    /// This method generates the trial record offline ResultData structure and appends to the current 
    /// visit selection page.
    /// 
    /// </summary>
    /// <param name="PageCommand">Evado.Model.UniForm.Command object</param>
    /// <param name="ExitPageId">A unique exit page identifier.</param>
    /// <returns>Guid: containing the page ResultData object reference value</returns>
    //  ----------------------------------------------------------------------------------
    private Guid getOfflineVisitData (
      Evado.Model.UniForm.Command PageCommand,
      Guid ExitPageId )
    {
      this.LogValue ( Evado.Model.UniForm.EuStatics.CONST_METHOD_START
        + "Evado.UniForm.Clinical.ApplicationService.getOfflineVisitData method. "
        + "\r\n Parameter PageCommand " + PageCommand.getAsString ( false, true ) );

      // 
      // Initialise the methods objects and variables.
      // 
      EuSubjectMilestones subjectMilestones = new EuSubjectMilestones (
        this._ApplicationObjects,
        this.ServiceUserProfile,
        this.Session,
        this.UniForm_BinaryFilePath,
        this.UniForm_BinaryServiceUrl,
        this._FileRepositoryPath,
        this.ClassParameters );

      subjectMilestones.LoggingLevel = this.LoggingLevel;

      EuFormRecords records = new EuFormRecords (
              this._ApplicationObjects,
              this.ServiceUserProfile,
              this.Session,
              this.UniForm_BinaryFilePath,
              this.UniForm_BinaryServiceUrl,
              this.ClassParameters );

      records.LoggingLevel = this.LoggingLevel;

      // 
      // Get the milestone object groupCommand
      // 
      Evado.Model.UniForm.AppData visitData = subjectMilestones.getDataObject ( PageCommand );

      // 
      // get the first instance of the offline page to resolve it's groupCommand ids'
      // 
      Evado.Model.UniForm.Page firstVisitData = this.getOffLinePageObject ( visitData.Page.PageId );

      // 
      // If the returned page is null the page is not in the list so
      // use the current page.  
      // It will be added at the end of the method.
      // 
      if ( firstVisitData == null )
      {
        firstVisitData = visitData.Page;
      }

      this.LogValue ( "Page Title: " + visitData.Page.Title );

      //
      // Skip all issued resolved or cancelled records by returning an empty GUID.
      // 
      if ( this.Session.SubjectMilestone.State == EvMilestone.MilestoneStates.Issues_Resolved
        || this.Session.SubjectMilestone.State == EvMilestone.MilestoneStates.Cancelled )
      {
        this.LogValue ( "Completed Visit EXIT." );

        return Guid.Empty;
      }

      //
      // If the not all schedule visits and next scheduled visit are selected exit
      // 
      if ( ( this.Session.SubjectMilestone.State == EvMilestone.MilestoneStates.Scheduled )
        && this.Session.Trial.Data.OfflineVisitSelection_AllScheduled == false
        && this.Session.Trial.Data.OfflineVisitSelection_NextScheduled == false
        && this._ScheduledVisitCount > 0 )
      {
        this.LogValue ( "Scheduled visit are not select for offline operation EXIT." );
        return Guid.Empty;
      }

      if ( this.Session.SubjectMilestone.State == EvMilestone.MilestoneStates.Scheduled )
      {
        this._ScheduledVisitCount++;
      }
      this.LogValue ( "ScheduledVisitCount: " + this._ScheduledVisitCount );

      //
      // If the next scheduled visit is set other then the next schedule visit is encountered
      //  exit by returning a empty guid.
      // 
      if ( this._ScheduledVisitCount >= EuAdapter.CONST_NEXT_SCHEDULED_Subject_Milestone_NUMBER
        && this.Session.Trial.Data.OfflineVisitSelection_NextScheduled == false )
      {
        this.LogValue ( "Not the next scheduled visit EXIT." );
        return Guid.Empty;
      }

      //
      // If an attended visit is encountered and the selection does not include
      // Attended visits exit by returning a empty guid.
      // 
      if ( this.Session.SubjectMilestone.State == EvMilestone.MilestoneStates.Attended
        && this.Session.Trial.Data.OfflineVisitSelection_Attended == false )
      {
        this.LogValue ( "Attended visits not selected EXIT." );
        return Guid.Empty;
      }

      //
      // If a monitored visit visit is encountered and the selection does include 
      // monitored visits exit by returning a empty guid.
      // 
      if ( this.Session.SubjectMilestone.State == EvMilestone.MilestoneStates.Monitored
        && this.Session.Trial.Data.OfflineVisitSelection_Monitored == false )
      {
        this.LogValue ( "Monitored visit not selected EXIT." );
        return Guid.Empty;
      }

      if ( visitData.Page.EditAccess == Evado.Model.UniForm.EditAccess.Inherited_Access
        || visitData.Page.EditAccess == Evado.Model.UniForm.EditAccess.Enabled )
      {
        this.setVisitStatusSelectionList ( visitData.Page );
      }

      this.LogValue ( "Page Group Count: " + visitData.Page.GroupList.Count );

      // 
      // Get the offline page and ResultData.
      // 
      this._OfflineAppData.Offline.AppendPage ( visitData.Page );

      // 
      // Create the page ResultData object for the page.
      //
      Evado.Model.UniForm.PageData visitPageData = visitData.Page.getPageData (
           EuAdapter.APPLICATION_ID,
           EuAdapterClasses.Subject_Milestone.ToString ( ) );

      // 
      // Retrieve the save object to add it to the page reference object.
      // 
      Evado.Model.UniForm.Command saveCommand = visitData.Page.getCommand (
        EvLabels.Offline_Synchronsie_Command_Title );

      // 
      // Add the page ResultData guid to the groupCommand and add the page reference to the 
      // milestone page ResultData object.
      // 
      if ( saveCommand != null )
      {
        this.LogValue ( "save Command title: " + saveCommand.Title );

        // 
        // get the first instance of the page save groupCommand 
        // 
        Evado.Model.UniForm.Command firstSaveCommandInstance = firstVisitData.getCommand ( saveCommand.Title );

        //pageCommand.AddParameter (
        //  Model.UniForm.Command.StandardCommandParameters.PageDataGuid,
        //  ExitPageId );

        visitPageData.addPageReference ( firstSaveCommandInstance.Id, ExitPageId );

      }//END save groupCommand exists.
      else
      {
        this.LogValue ( "save Command is NULL." );
      }

      //
      // delete page commands that are not used when working offline.
      // 
      bool bDeleteAttend = visitData.Page.deleteCommand ( EvLabels.Subject_Milestone_Page_Attend_Label );
      bool bDeleteComplete = visitData.Page.deleteCommand ( EvLabels.Subject_Milestone_Page_Completed_Command );
      bool bDeleteCancelled = visitData.Page.deleteCommand ( EvLabels.Subject_Milestone_Page_Cancelled_Command );
      bool bDeleteAE = visitData.Page.deleteCommand ( EvLabels.Serious_Adverse_Event_New_Record_Command_Title );
      bool bDeleteMonitored = visitData.Page.deleteCommand ( EvLabels.Subject_Milestone_Page_Monitored_Command );
      bool bDeleteRsolved = visitData.Page.deleteCommand ( EvLabels.Subject_Milestone_Page_Issues_Resolved_Command );

      // 
      // Add the page ResultData object to the list of page ResultData objects.
      // 
      this._OfflineAppData.Offline.PageDataList.Add ( visitPageData );

      // 
      // Check that the page has groups and one of the groups has the selection commands
      // 
      if ( visitData.Page.GroupList.Count == 0 )
      {
        this.LogValue ( EvLabels.Subject_Milestone_Record_Group_Error );

        this._OfflineAppData.Message = EvLabels.Subject_Milestone_Record_Group_Error;

        this._EventCode = EvEventCodes.WebServices_Offline_Visit_Record_List_Empty;

        //
        // Return the empty guid if an error is encountered.
        // 
        return Guid.Empty;
      }

      // 
      // Iterate through the visit pageMenuGroup extracting the visit record pageMenuGroup.
      // 
      for ( int pageGroupCount = 0; pageGroupCount < visitData.Page.GroupList.Count; pageGroupCount++ )
      {
        Evado.Model.UniForm.Group vistPageGroup = visitData.Page.GroupList [ pageGroupCount ];

        // 
        // If the pageMenuGroup has an hidden offline pageMenuGroup then remove it from the page.
        // 
        if ( vistPageGroup.hasParameter ( Model.UniForm.GroupParameterList.Offline_Hide_Group ) == true )
        {
          visitData.Page.GroupList.RemoveAt ( pageGroupCount );
          pageGroupCount--;
          continue;
        }

        this.LogValue ( " vistPageGroup Title: " + vistPageGroup.Title );

        if ( vistPageGroup.Title != EvLabels.Subject_Milestone_Mandatory_Records_Group_Title )
        {

          this.LogText ( " >> GROUP NOT FOUND" );
          continue;
        }

        this.LogText ( " >> GROUP FOUND" );
        this.LogValue ( " Visit has " + vistPageGroup.CommandList.Count + " records." );

        // 
        // Iterate through the pageMenuGroup commands collecting the ResultData for each milestone.
        // 
        foreach ( Evado.Model.UniForm.Command recordCommand in vistPageGroup.CommandList )
        {
          // 
          // Call the getOfflineRecordData method
          // 
          Guid recordDataId = getOfflineRecordData ( recordCommand );

          // 
          // Append the groupCommand page reference for the groupCommand and page.
          // 
          if ( recordDataId != Guid.Empty
            && recordCommand != null )
          {
            visitPageData.addPageReference ( recordCommand.Id, recordDataId );
          }
        }//END Record Command iteration loop

      }//END pageMenuGroup iteration loop.

      this.LogValue ( "=========== END OF getOfflineVisitData METHOD ===========r\n" );
      // 
      // Return the page ResultData object GUID identifier.
      // 
      return visitPageData.Id;

    }//END getOfflineVisitData method

    // ==================================================================================
    /// <summary>
    /// This method generates the milestone offline ResultData structure and appends to the current 
    /// milestone selection page.
    /// 
    /// </summary>
    /// <param name="PageCommand">Evado.Model.UniForm.Command object</param>
    /// <returns>Guid: containing the page ResultData object reference value</returns>
    //  ----------------------------------------------------------------------------------
    private Guid getOfflineRecordData (
      Evado.Model.UniForm.Command PageCommand )
    {
      this.LogValue ( Evado.Model.UniForm.EuStatics.CONST_METHOD_START
        + "Evado.UniForm.Clinical.ApplicationService.getOfflinesubjectViewData method. "
        + "\r\n Parameter PageCommand " + PageCommand.getAsString ( false, true ) );

      EuFormRecords records = new EuFormRecords (
              this._ApplicationObjects,
              this.ServiceUserProfile,
              this.Session,
              this.UniForm_BinaryFilePath,
              this.UniForm_BinaryServiceUrl,
              this.ClassParameters );

      //records.DebugOn = this._DebugOn;

      //records.resetDebugLog ( );
      this.LogValue ( " Record Command: " + PageCommand.getAsString ( false, true ) );

      // 
      // Select the groupCommand if it is pointing to a milestone with get object method.
      // 
      if ( PageCommand.Object == EuAdapterClasses.Scheduled_Record.ToString ( )
        && PageCommand.Method == Model.UniForm.ApplicationMethods.Get_Object )
      {
        this.LogValue ( "the command is not a record get command." );

        return Guid.Empty;
      }

      this.LogValue ( "Record Command." );
      // 
      // Get the visit object groupCommand
      // 
      Evado.Model.UniForm.AppData recordData = records.getDataObject ( PageCommand );

      this.LogValue ( records.Log );

      this.LogValue ( "record: " + recordData.Title );

      //
      // Skip records that have been completed and locked by ResultData managers.
      // 
      if ( this.Session.Record.State == EvFormObjectStates.Locked_Record )
      {
        this.LogValue ( "Skip completed records." );

        return Guid.Empty;
      }

      // 
      // If the returned object has a valid guid then append the record page to the the 
      // offline ResultData.
      // 
      if ( recordData.Id == Guid.Empty )
      {
        this.LogValue ( "Guid Empty." );

        return Guid.Empty;
      }
      // 
      // Reset the record title to remove references to the first record instance that
      // created this page object.
      // 
      recordData.Page.Title = EvLabels.Offline_Record_Page_Title;

      // 
      // get the first instance of the offline page to resolve it's groupCommand ids'
      // 
      Evado.Model.UniForm.Page firstRecordData = this.getOffLinePageObject ( recordData.Page.PageId );

      // 
      // If the returned page is null the page is not in the list so
      // use the current page.  
      // It will be added at the end of the method.
      // 
      if ( firstRecordData == null )
      {
        firstRecordData = recordData.Page;
      }

      this.LogValue ( "first record title: " + firstRecordData.Title );

      // 
      // Append the page to the list of offline page objects.
      // 
      this._OfflineAppData.Offline.AppendPage ( recordData.Page );

      //
      // Skip all issued resolved or cancelled records by returning an empty GUID.
      // 
      if ( this.Session.Record.State == EvFormObjectStates.Withdrawn
        || this.Session.Record.State == EvFormObjectStates.Locked_Record
        || this.Session.Record.State == EvFormObjectStates.Queried_Record_Copy )
      {
        this.LogValue ( "Completed Visit EXIT." );

        return Guid.Empty;
      }

      // 
      // If draft record are not selected for offline operation and a draft or queried record
      // is encountered continue to the next record.
      // 
      if ( this.Session.Trial.Data.OfflineRecordSelection_Draft == false
        && ( this.Session.Record.State == EvFormObjectStates.Draft_Record
          || this.Session.Record.State == EvFormObjectStates.Queried_Record ) )
      {
        return Guid.Empty;
      }

      // 
      // If submitted record are not selected for offline operation and a submitted record
      // is encountered continue to the next record.
      // 
      if ( this.Session.Trial.Data.OfflineRecordSelection_Submitted == false
        && this.Session.Record.State == EvFormObjectStates.Submitted_Record )
      {
        return Guid.Empty;
      }

      // 
      // If source record are not selected for offline operation and a source ResultData record
      // is encountered continue to the next record.
      // 
      if ( this.Session.Trial.Data.OfflineRecordSelection_Source == false
        && this.Session.Record.State == EvFormObjectStates.Source_Data_Verified )
      {
        return Guid.Empty;
      }

      // 
      // Set the status field to being a selection field for offline operation.
      // 
      if ( recordData.Page.EditAccess == Evado.Model.UniForm.EditAccess.Inherited_Access
        || recordData.Page.EditAccess == Evado.Model.UniForm.EditAccess.Enabled )
      {
        this.setRecordStatusSelectionList ( recordData.Page );
      }

      // 
      // Create the page ResultData object for the page.
      //
      Evado.Model.UniForm.PageData RecordPageData = recordData.Page.getPageData (
           EuAdapter.APPLICATION_ID,
           EuAdapterClasses.Scheduled_Record.ToString ( ) );

      // 
      // Retrieve the save object to add it to the page reference object.
      // 
      Evado.Model.UniForm.Command saveRecordCommand = recordData.Page.getCommand (
        EvLabels.Offline_Synchronsie_Command_Title );

      // 
      // Add the page ResultData guid to the groupCommand and add the page reference to the 
      // milestone page ResultData object.
      // 

      // 
      // get the first instance of the page save groupCommand 
      // 
      Evado.Model.UniForm.Command firstSaveCommand = firstRecordData.getCommand ( saveRecordCommand.Title );

      if ( saveRecordCommand != null
        && firstSaveCommand != null )
      {
        this.LogValue ( "Record save Command is FOUND." );
        RecordPageData.addPageReference ( firstSaveCommand.Id, recordData.Page.Id );

      }//END save groupCommand exists.
      else
      {
        this.LogValue ( " Record save Command is NULL." );
      }

      //
      // delete page commands that are not used when working offline.
      // 
      bool bDeleteSubmit = recordData.Page.deleteCommand ( EvLabels.Record_Submit_Command );
      bool bDeleteWithdraw = recordData.Page.deleteCommand ( EvLabels.Record_Withdraw_Command );
      bool bDeleteMonitor = recordData.Page.deleteCommand ( EvLabels.Record_Monitor_Command_Title );
      bool bDeleteLock = recordData.Page.deleteCommand ( EvLabels.Record_Lock_Command );

      this.LogText ( "Delete Submit:" + bDeleteSubmit );
      this.LogText ( " Withdraw:" + bDeleteWithdraw );
      this.LogText ( " Monitor:" + bDeleteMonitor );
      this.LogValue ( " Lock:" + bDeleteLock );

      // 
      // append the page ResultData object to the list of page ResultData objects.
      // 
      this._OfflineAppData.Offline.PageDataList.Add ( RecordPageData );

      this.LogValue ( "=========== END OF getOfflineRecordData METHOD ===========r\n" );

      return RecordPageData.Id;

    }//END getOfflineRecordData method

    // ==================================================================================
    /// <summary>
    /// This method set the visit status field
    /// </summary>
    /// <param name="VisitPage">Evado.Model.UniForm.Page object</param>
    // ----------------------------------------------------------------------------------
    private void setVisitStatusSelectionList ( Evado.Model.UniForm.Page VisitPage )
    {
      this.LogValue ( Evado.Model.UniForm.EuStatics.CONST_METHOD_START
       + "Evado.UniForm.Clinical.ApplicationService.setVisitStatusSelectionList" );
      // 
      // Retrieve the status field.
      // 
      Evado.Model.UniForm.Field field = VisitPage.getField ( EvIdentifiers.DISPLAY_PREFIX + EvIdentifiers.OBJECT_STATE );
      List<EvOption> optionList = new List<EvOption> ( );
      optionList.Add ( new EvOption ( ) );

      // 
      // Exit the method if the field has not been found.
      // 
      if ( field == null )
      {
        return;
      }

      this.LogValue ( "fieldId: " + field.FieldId );

      // 
      // Generate the status options based on the current visit state.
      //
      optionList.Add ( Evado.Model.Digital.EvcStatics.Enumerations.getOption ( EvMilestone.MilestoneStates.Scheduled ) );
      optionList.Add ( Evado.Model.Digital.EvcStatics.Enumerations.getOption ( EvMilestone.MilestoneStates.Attended ) );
      optionList.Add ( Evado.Model.Digital.EvcStatics.Enumerations.getOption ( EvMilestone.MilestoneStates.Completed ) );
      optionList.Add ( Evado.Model.Digital.EvcStatics.Enumerations.getOption ( EvMilestone.MilestoneStates.Cancelled ) );
      optionList.Add ( Evado.Model.Digital.EvcStatics.Enumerations.getOption ( EvMilestone.MilestoneStates.Monitored ) );
      optionList.Add ( Evado.Model.Digital.EvcStatics.Enumerations.getOption ( EvMilestone.MilestoneStates.Issues_Resolved ) );

      field.FieldId = EvIdentifiers.OBJECT_STATE;
      field.Type = Evado.Model.EvDataTypes.Radio_Button_List;
      field.OptionList = optionList;
      field.EditAccess = Evado.Model.UniForm.EditAccess.Enabled;

      this.LogValue ( "=========== END OF setVisitStatusSelectionList METHOD ===========r\n" );

    }//END setVisitStatusSelectionList method

    // ========================================
    // <summary>
    // This method set the visit status field
    // </summary>
    // <param name="RecordPage">Evado.Model.UniForm.Page object</param>
    // ----------------------------------------------------------------------------------
    private void setRecordStatusSelectionList ( Evado.Model.UniForm.Page RecordPage )
    {
      this.LogValue ( Evado.Model.UniForm.EuStatics.CONST_METHOD_START
        + "Evado.UniForm.Clinical.ApplicationService.setRecordStatusSelectionList" );
      // 
      // Retrieve the status field.
      // 
      Evado.Model.UniForm.Field field = RecordPage.getField ( EvIdentifiers.DISPLAY_PREFIX + EvIdentifiers.OBJECT_STATE );
      List<EvOption> optionList = new List<EvOption> ( );
      optionList.Add ( new EvOption ( ) );

      // 
      // Exit the method if the field has not been found.
      // 
      if ( field == null )
      {
        return;
      }

      this.LogValue ( "fieldId: " + field.FieldId );

      optionList.Add ( Evado.Model.Digital.EvcStatics.Enumerations.getOption ( EvFormObjectStates.Draft_Record ) );
      optionList.Add ( Evado.Model.Digital.EvcStatics.Enumerations.getOption ( EvFormObjectStates.Queried_Record ) );
      optionList.Add ( Evado.Model.Digital.EvcStatics.Enumerations.getOption ( EvFormObjectStates.Submitted_Record ) );
      optionList.Add ( Evado.Model.Digital.EvcStatics.Enumerations.getOption ( EvFormObjectStates.Source_Data_Verified ) );

      field.FieldId = EvIdentifiers.OBJECT_STATE;
      field.Type = Evado.Model.EvDataTypes.Radio_Button_List;
      field.OptionList = optionList;
      field.EditAccess = Evado.Model.UniForm.EditAccess.Enabled;

      this.LogValue ( "=========== END OF setRecordStatusSelectionList METHOD ===========r\n" );

    }//END setRecordStatusSelectionList method

    // ==================================================================================
    /// <summary>
    /// This method generates the trial record offline ResultData structure and appends to the current 
    /// visit selection page.
    /// 
    /// </summary>
    /// <param name="PageCommand">Evado.Model.UniForm.Command object</param>
    /// <param name="ApplicationObjectType">Adapter.ApplicationObjects object</param>
    /// <returns>Guid: containing the page ResultData object reference value</returns>
    //  ----------------------------------------------------------------------------------
    private Guid getOfflineCommonRecordData (
      Evado.Model.UniForm.Command PageCommand,
      EuAdapterClasses ApplicationObjectType )
    {
      this.LogValue ( Evado.Model.UniForm.EuStatics.CONST_METHOD_START
        + "Evado.UniForm.Clinical.ApplicationService.getOfflineCommonRecordData method. "
        + "\r\n Parameter PageCommand " + PageCommand.getAsString ( false, true )
        + "\r\n RecordType: " + ApplicationObjectType );
      /// 
      /// Initialise the methods objects and variables.
      /// 
      EuCommonRecords commonRecords = new EuCommonRecords (
        this._ApplicationObjects,
        this.ServiceUserProfile,
        this.Session,
        this.UniForm_BinaryFilePath,
        this.UniForm_BinaryServiceUrl,
        this.ClassParameters );

      commonRecords.LoggingLevel = this.LoggingLevel;

      this.LogValue ( "SessionObjects.RecordSelectionState : "
        + this.Session.RecordSelectionState );

      ///  
      /// Reset the visit selection for offline ResultData collection.
      ///  
      this.Session.SubjectMilestone = new EvMilestone ( );

      /// 
      /// Create a groupCommand record view page, with a list of get object commands.
      /// 
      Evado.Model.UniForm.AppData commonRecordList = commonRecords.getDataObject (
        PageCommand );

      /// 
      /// get the first instance of the offline page to resolve it's groupCommand ids'
      /// 
      Evado.Model.UniForm.Page firstPageInstance = this.getOffLinePageObject ( commonRecordList.Page.PageId );

      /// 
      /// If the returned page is null the page is not in the list so
      /// user the current page.  
      /// It will be added at the end of the method.
      /// 
      if ( firstPageInstance == null )
      {
        firstPageInstance = commonRecordList.Page;
      }

      this.LogValue ( "commonRecords DebugLog: " + commonRecords.Log );

      this.LogValue ( "Page Title: " + commonRecordList.Page.Title );
      this.LogValue ( "Page Group Count: " + commonRecordList.Page.GroupList.Count );

      /// 
      /// Add the page to the list of ooffline pages.
      /// 
      this._OfflineAppData.Offline.AppendPage ( commonRecordList.Page );

      /// 
      /// Create the page ResultData object for the page.
      ///
      Evado.Model.UniForm.PageData pageData = commonRecordList.Page.getPageData (
           EuAdapter.APPLICATION_ID,
           EuAdapterClasses.Subject_Milestone.ToString ( ) );

      ///
      /// Add the selection page's selection field values.
      /// 
      pageData.SelectionFields = EvForm.FormClassFieldNames.SubjectId
        + ";" + EvForm.FormClassFieldNames.FormId
        + ";" + ApplicationObjectType.ToString ( );

      /// 
      /// Add the page ResultData object to the list of page ResultData objects.
      /// 
      this._OfflineAppData.Offline.PageDataList.Add ( pageData );

      /// 
      /// Check that the page has groups and one of the groups has the selection commands
      /// Exit if no goup are found.
      /// 
      if ( commonRecordList.Page.GroupList.Count == 0 )
      {
        this.LogValue ( EvLabels.Common_Records_List_Error_Message );

        this._OfflineAppData.Message = EvLabels.Common_Records_List_Error_Message;

        this._EventCode = EvEventCodes.WebServices_Offline_Common_Record_List_Empty;

        return Guid.Empty;
      }

      /// 
      /// Iterate through the visit pageMenuGroup extracting the visit record pageMenuGroup.
      /// 
      for ( int pageGroupCount = 0; pageGroupCount < commonRecordList.Page.GroupList.Count; pageGroupCount++ )
      {
        Evado.Model.UniForm.Group pageGroup = commonRecordList.Page.GroupList [ pageGroupCount ];

        this.LogValue ( " recordListGroup Title: " + pageGroup.Title );

        /// 
        /// If the pageMenuGroup has an hidden offline pageMenuGroup then remove it from the page.
        /// 
        if ( pageGroup.hasParameter ( Model.UniForm.GroupParameterList.Offline_Hide_Group ) == true )
        {
          this.LogText ( " >> SELECTION GROUP REMOVE FROM PAGE." );

          commonRecordList.Page.GroupList.RemoveAt ( pageGroupCount );
          pageGroupCount--;
          continue;
        }

        /// 
        /// if the pageMenuGroup title does not relate to a list of AE SAE or CCM record commands
        /// skip the pageMenuGroup.
        /// 
        if ( pageGroup.Title != EvLabels.Common_Record_List_Group_Title
          && pageGroup.Title != EvLabels.Adverse_Event_Record_List_Title
          && pageGroup.Title != EvLabels.Serious_Adverse_Event_Record_List_Title
          && pageGroup.Title != EvLabels.Concomitant_Medication_Record_List_Title )
        {

          this.LogValue ( " >> GROUP NOT FOUND" );
          continue;
        }

        //pageMenuGroup. 

        /*
         * pageData.SelectionFields = EvForm.FormClassFieldNames.SubjectId
      + ";" + EvForm.FormClassFieldNames.FormId
      + ";" + ApplicationObjectType.ToString();
         */

        this.LogValue ( " >> GROUP FOUND" );

        this.LogValue ( "page group has " + pageGroup.CommandList.Count + " records commands." );

        /// 
        /// Iterate through the pageMenuGroup commands collecting the ResultData for each record.
        /// 
        foreach ( Evado.Model.UniForm.Command recordCommand in pageGroup.CommandList )
        {
          this.LogValue ( " Record Command: " + recordCommand.getAsString ( false, true ) );

          /// 
          /// Select the groupCommand if it is pointing to a milestone with get object method.
          /// 
          if ( recordCommand.Object == EuAdapterClasses.Common_Record.ToString ( )
            && recordCommand.Method == Model.UniForm.ApplicationMethods.Get_Object )
          {
            this.LogValue ( "Record Command." );
            /// 
            /// get the common record application ResultData object
            /// 
            Evado.Model.UniForm.AppData recordData = commonRecords.getDataObject (
              recordCommand );

            this.LogValue ( commonRecords.Log );

            this.LogValue ( "record: " + recordData.Title );

            ///
            /// Skip records that have been withdrawn or locked by ResultData managers.
            /// 
            if ( this.Session.Record.State == EvFormObjectStates.Locked_Record
              || this.Session.Record.State == EvFormObjectStates.Withdrawn )
            {
              this.LogValue ( "Skip completed records." );
              continue;
            }

            /// 
            /// If the returned object has a valid guid then append the record page to the the 
            /// offline ResultData.
            /// 
            if ( recordData.Id != Guid.Empty )
            {
              /// 
              /// Reset the record title to remove references to the first record instance that
              /// created this page object.
              /// 
              recordData.Page.Title = this.Session.CommonRecord.Title;

              /// 
              /// Set the status field to being a selection field for offline operation.
              /// 
              if ( recordData.Page.EditAccess == Evado.Model.UniForm.EditAccess.Inherited_Access
                || recordData.Page.EditAccess == Evado.Model.UniForm.EditAccess.Enabled )
              {
                this.setRecordStatusSelectionList ( recordData.Page );
              }

              /// 
              /// Append the record page to the offline ResultData.
              /// 
              this._OfflineAppData.Offline.AppendPage ( recordData.Page );

              /// 
              /// Create the page ResultData object for the page.
              ///
              Evado.Model.UniForm.PageData pageData1 = recordData.Page.getPageData (
                   EuAdapter.APPLICATION_ID,
                   ApplicationObjectType.ToString ( ) );
              /// 
              /// Retrieve the save object to add it to the page reference object.
              /// 
              Evado.Model.UniForm.Command saveCommand = recordData.Page.getCommand (
                EvLabels.Offline_Synchronsie_Command_Title );

              /// 
              /// get the first instance of the page save groupCommand 
              /// 
              Evado.Model.UniForm.Command firstSaveCommandInstance = firstPageInstance.getCommand ( saveCommand.Title );

              /// 
              /// Add the page ResultData guid to the groupCommand and add the page reference to the 
              /// milestone page ResultData object.
              /// 
              if ( saveCommand != null )
              {
                this.LogValue ( "saveCommand is FOUND." );

                //saveCommand.AddParameter (
                //  Model.UniForm.Command.StandardCommandParameters.PageDataGuid,
                //  commonRecordList.Page.Id );

                pageData1.addPageReference ( firstSaveCommandInstance.Id, commonRecordList.Page.Id );
              }//END save groupCommand exists.
              else
              {
                this.LogValue ( "saveCommand is NULL." );
              }

              ///
              /// delete page commands that are not used when working offline.
              /// 
              bool bDeleteSubmit = recordData.Page.deleteCommand ( EvLabels.Record_Submit_Command );
              bool bDeleteWithdraw = recordData.Page.deleteCommand ( EvLabels.Record_Withdraw_Command );
              bool bDeleteMonitor = recordData.Page.deleteCommand ( EvLabels.Record_Monitor_Command_Title );
              bool bDeleteLock = recordData.Page.deleteCommand ( EvLabels.Record_Lock_Command );

              this.LogText ( "Delete Submit:" + bDeleteSubmit );
              this.LogText ( " Withdraw:" + bDeleteWithdraw );
              this.LogText ( " Monitor:" + bDeleteMonitor );
              this.LogValue ( " Lock:" + bDeleteLock );

              ///
              /// Add the selection field values.
              /// 
              pageData1.SelectionFields = EvForm.FormClassFieldNames.SubjectId
                + ";" + EvForm.FormClassFieldNames.FormId;

              /// 
              /// Add the page ResultData object to the list of page ResultData objects.
              /// 
              this._OfflineAppData.Offline.PageDataList.Add ( pageData1 );

              ///
              /// Append the page ResultData guid as a parameter to the groupCommand.
              /// 
              //recordCommand.AddParameter (
              //  Model.UniForm.Command.StandardCommandParameters.PageDataGuid,
              //  pageData1.Id );

              /// 
              /// Append the groupCommand page reference for the groupCommand and page.
              /// 
              pageData.addPageReference ( firstPageInstance.Id, pageData1.Id );
            }
            else
            {
              this.LogValue ( "Empty record returned." );
            }
          }//END correct record type.

        }//END record iteration loop.

      }//END pageMenuGroup iteration loop.

      this.LogValue ( "=========== END OF getOfflineCommonRecordData METHOD ===========r\n" );
      /// 
      /// Return the page ResultData object GUID identifier.
      /// 
      return pageData.Id;

    }//END getOfflineCommonRecordData method

    // ==================================================================================
    /// <summary>
    /// This method gets an offline page object.
    /// </summary>
    /// <param name="PageId">String: Page identifier.</param>
    /// <returns>Evado.Model.UniForm.Page</returns>
    // ----------------------------------------------------------------------------------
    private Evado.Model.UniForm.Page getOffLinePageObject ( String PageId )
    {
      this.LogValue ( Evado.Model.UniForm.EuStatics.CONST_METHOD_START
        + "Evado.UniForm.Clinical.ApplicationService.getOffLinePageObject method. "
        + "\r\n PageId: " + PageId
        + "\r\n Page count: " + this._OfflineAppData.Offline.PageList.Count );

      // 
      // Iterate through the offline page list to find the matching page.
      // To return the page object if it is found.
      // 
      for ( int i = 0; i < this._OfflineAppData.Offline.PageList.Count; i++ )
      {
        Evado.Model.UniForm.Page page = this._OfflineAppData.Offline.PageList [ i ];

        this.LogText ( "i: " + i + " pageId: " + page.PageId );

        if ( page.PageId == PageId )
        {
          this.LogValue ( " > FOUND" );
          return page;
        }
        else
        {
          this.LogValue ( " > NOT FOUND" );
        }
      }

      // 
      // Return null of no page is found.
      // 
      return null;
    }

  }//END Service class

}//END NAMESPACE
